seed(12345)
mvi = 0
mni = 0

# Read in the character data, note there is some missing character data notated by '?'. 
data = readCharacterData("romanceMulti.nex")

nchar = data.nchar()

## for (c in 1:nchar) {
##   cdata[c] = readCharacterData("romanceAlignments.nex")
##   cdata[c].excludeAll()
##   cdata[c].includeCharacter(c)
## }

# To accommodate for phylogenetic uncertainty, we will run our analyses over a
# posterior distribution of trees estimated in a previous analysis. We do this
# by sampling from an empirical tree distribution constructed from the tree trace
# output of the previous MCMC analysis.

# read in tree trace
treetrace = treeTrace(readTrees("romance.posterior.tree",
                                treetype="non-clock"), burnin=0)

# draw a tree from the empirical tree distribution
psi ~ dnEmpiricalTree(treetrace)
moves[++mvi] = mvEmpiricalTree(psi, metropolisHastings=FALSE)



# rate of change

rateMultiplier ~ dnExp(1)
moves[++mvi] = mvScale(rateMultiplier, lambda=1.0)


alpha_prior_mean <- ln(5.0)
alpha_prior_sd <- 0.587405
alpha ~ dnLognormal(alpha_prior_mean, alpha_prior_sd)
sr := fnDiscretizeGamma(alpha, alpha, 10)
moves[++mvi] = mvScale(alpha, lambda=1.0)




k = 11

Q = fnJC(k)


seq ~ dnPhyloCTMC(Q=Q,
                  tree=psi,
                  rootFrequencies=simplex(rep(1, k)),
                  siteRates=sr,
                  branchRates=rateMultiplier,
                  type="Standard")
seq.clamp(data)


siteRates := seq.siteRates()


mymodel = model(seq)

monitors[++mni] = mnScreen(printgen=10)

monitors[++mni] = mnFile(filename="output/ccRates.log",
                         printgen=10)
monitors[mni].addVariable(alpha)
monitors[mni].addVariable(rateMultiplier)
monitors[mni].addVariable(siteRates)


###############
# run MCMC analysis
###############


mymcmc = mcmc(mymodel, monitors, moves, nruns=4)
mymcmc.burnin(1000, tuningInterval=100)
mymcmc.run(5000)

mymcmc.operatorSummary()

q()
